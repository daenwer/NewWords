# Generated by Django 3.2.15 on 2022-08-30 22:08

import app.models.base
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_chat_id', models.IntegerField(blank=True, null=True, verbose_name='ID Telegram chat')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('token', models.UUIDField(blank=True, null=True, unique=True, verbose_name='token')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Phrase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=512, null=True, verbose_name='Word or phrase')),
                ('pronunciation', models.CharField(blank=True, max_length=256, null=True, verbose_name='Pronunciation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Phrase',
                'verbose_name_plural': 'Phrases',
            },
        ),
        migrations.CreateModel(
            name='UserSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(default='9:00')),
                ('repetition_1', models.IntegerField(default=3600, verbose_name='First repetition')),
                ('repetition_2', models.IntegerField(default=28800, verbose_name='Second repetition')),
                ('repetition_3', models.IntegerField(default=86400, verbose_name='Third repetition')),
                ('repetition_4', models.IntegerField(default=259200, verbose_name='Fourth repetition')),
                ('repetition_5', models.IntegerField(default=604800, verbose_name='Fifth repetition')),
                ('repetition_6', models.IntegerField(default=1814400, verbose_name='Sixth repetition')),
                ('repetition_7', models.IntegerField(default=7776000, verbose_name='Seventh repetition')),
                ('repetition_8', models.IntegerField(default=15552000, verbose_name='Eighth repetition')),
                ('repetition_9', models.IntegerField(default=31104000, verbose_name='Ninth repetition')),
            ],
            options={
                'verbose_name': 'User schedule',
                'verbose_name_plural': 'User schedules',
            },
        ),
        migrations.CreateModel(
            name='UserPhrase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('next_repetition', models.DateField(default=datetime.date.today, verbose_name='Next repetition')),
                ('repeat_schedule', models.JSONField(default=app.models.base.schedule_default)),
                ('in_work', models.BooleanField(default=False)),
                ('base_phrase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phrase', to='app.phrase')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User phrase',
                'verbose_name_plural': 'User phrases',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='user_schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_schedule', to='app.userschedule', verbose_name='UserSchedule'),
        ),
    ]
